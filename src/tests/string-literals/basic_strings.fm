// Basic string literal assignment and usage
fn main() -> i32 {
    let message: i8* = "Hello, World!";
    puts(message);
    return 0;
}


// String literal with escape sequences
fn main() -> i32 {
    let text: i8* = "Line 1\nLine 2\tTabbed";
    printf("%s\n", text);
    return 0;
}

// String literal as function parameter
fn print_greeting(msg: i8*) -> void {
    printf("Greeting: %s\n", msg);
}
fn main() -> i32 {
    print_greeting("Welcome!");
    return 0;
}

// String literal in struct
struct person {
    let name: i8* = "Unknown";
    let age: i32 = 0;
    fn introduce() -> void;
};
fn person::introduce() -> void {
    printf("Hi, I'm %s, age %d\n", name, age);
}
fn main() -> i32 {
    let p: person = {"Bob", 30};
    p.introduce();
    return 0;
}

// String comparison using strcmp
fn main() -> i32 {
    let str1: i8* = "hello";
    let str2: i8* = "hello";
    let str3: i8* = "world";
    if (strcmp(str1, str2) == 0) {
        puts("Strings match!");
    }
    if (strcmp(str1, str3) != 0) {
        puts("Strings differ!");
    }
    return 0;
}

// String length calculation
fn main() -> i32 {
    let message: i8* = "Programming";
    let len: i32 = strlen(message);
    printf("Length of '%s' is %d\n", message, len);
    return len;
}

// Empty string literal
fn main() -> i32 {
    let empty: i8* = "";
    printf("Empty string length: %d\n", strlen(empty));
    return 0;
}

// String literal with quotes escaped
fn main() -> i32 {
    let quoted: i8* = "She said \"Hello\" to me.";
    puts(quoted);
    return 0;
}

// Multiple string literals in namespace
namespace messages {
    struct config {
        let error_msg: i8* = "Error occurred!";
        let success_msg: i8* = "Operation successful!";
        fn print_error() -> void;
        fn print_success() -> void;
    };
}
fn messages::config::print_error() -> void {
    puts(error_msg);
}
fn messages::config::print_success() -> void {
    puts(success_msg);
}
fn main() -> i32 {
    let cfg: messages::config = {};
    cfg.print_success();
    cfg.print_error();
    return 0;
}

// String literal with pointer arithmetic (if supported)
fn main() -> i32 {
    let text: i8* = "ABCDEF";
    let ptr: i8* = text + 2;
    printf("Original: %s\n", text);
    printf("From index 2: %s\n", ptr);
    printf("Character at index 2: %c\n", *ptr);
    return 0;
}

// Invalid: trying to assign string to non-pointer type (should fail)
fn main() -> i32 {
    let invalid: i32 = "This should fail";
    return 0;
}
